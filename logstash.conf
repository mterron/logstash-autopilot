input {
  # SysLog (RFC 3164) 
  syslog {
    port 	=> "${SYSLOG_PORT:3164}"
    type 	=> "syslog"
  }
  # SysLog (RFC 5424)
  tcp {
    port 	=> "${RFC5424_PORT:5424}"
    type 	=> "RFC5424"
  }
  udp {
    port 	=> "${RFC5424_PORT:5424}"
    type 	=> "RFC5424"
  }
  # RELP
  # It is not a default input plugin! 
  relp {
    port 	=> "${RELP_PORT:10514}"
    type 	=> "RFC5424"
    #ssl_enable  	=> false
    #ssl_cert	=> "/etc/tls/cert.pem"
    #ssl_key	=> "/etc/tls/cert.key"
    #ssl_cacert 	=> "/etc/ssl/private/ca.pem"
    #ssl_verify	=> false
  }
  # Graylog2
  gelf {
    port  => "${GELF_PORT:12201}"
    type  => "gelf"
  }
  # JSON lines (one event per line, \n delimited stream)
  tcp {
    port 	=> "${JSONLINES_PORT:13000}"
    type 	=> "json"
    codec	=> "json_lines"
  }
  udp {
    port  => "${JSONLINES_PORT:13000}"
    type  => "json"
    codec => "json_lines"
  }
  # JSON documents
  tcp {
    port 	=> "${JSON_PORT:14000}"
    type 	=> "json"
    codec	=> "json"
  }
  udp {
    port  => "${JSON_PORT:14000}"
    type  => "json"
    codec => "json"
  }
  # Fluent
  tcp {
    port 	=> "${FLUENT_PORT:24224}"
    type 	=> "fluent"
    codec	=> "fluent"
  }
  udp {
    port 	=> "${FLUENT_PORT:24224}"
    type 	=> "fluent"
    codec	=> "fluent"
  }
  # Beats
  beats {
    port 	=> "${BEATS_PORT:25109}"
    type 	=> "beats"
    #ssl  	=> false
    #ssl_certificate	=> "/etc/tls/cert.pem"
    #ssl_key	=> "/etc/tls/cert.key"
    #ssl_certificate_authorities => ["/etc/ssl/private/ca.pem"]
    #ssl_verify_mode	=> "force_peer"
  }
  # NMAP
  # It is not a default codec plugin!
  # Use: nmap -sP example.net -oX - | curl http://logstash-nmap:6666 -d @-
  # See https://www.elastic.co/blog/using-nmap-logstash-to-gain-insight-into-your-network
  http {
    port 	=> "${NMAP_PORT:6666}"
    type 	=> "nmap"
    codec	=> "nmap"
  }
}

filter {
  if [type] == "syslog" {
  
  }
  else if [type] == "RFC5424" {
    grok {
      match	=> { "message"	=> "%{SYSLOG5424PRI}%{NONNEGINT}%{SPACE}+(?:%{TIMESTAMP_ISO8601:syslog_timestamp}|-)%{SPACE}+(?:%{HOSTNAME:hostname}|-)%{SPACE}+(?:%{NOTSPACE:app}|-)%{SPACE}+(?:%{NOTSPACE:pid}|-)%{SPACE}+(?:%{NOTSPACE:msg_id}|-)%{SPACE}+(?:%{SYSLOG5424SD:structured_data}|-|)%{SPACE}+%{GREEDYDATA:syslog_message}(?:(\\|\r|\n)+)" 
      }
      remove_field  => "syslog5424_pri"
    }
  }
  #else if [type] == "gelf" {
  #  json {
  #    source  =>  "message"
  #  }
  #}
}

output {
  if "_grokparsefailure" in [tags] {
    file { path	=> "/opt/logstash/log/grok_failure_events-%{+YYYY-MM-dd}" }
  } 
  else {
    elasticsearch { 
      hosts	=> [] 
      sniffing 	=> true
    }
  }
  # DEBUG
  stdout { codec  => "rubydebug" }
}