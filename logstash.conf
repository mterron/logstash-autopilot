input {
  # SysLog (RFC 3164) 
  syslog {
    port  => "${SYSLOG_PORT:3164}"
    type  => "syslog"
  }
  # SysLog (RFC 5424)
  tcp {
    port  => "${RFC5424_PORT:5424}"
    type  => "RFC5424"
  }
  udp {
    port  => "${RFC5424_PORT:5424}"
    type  => "RFC5424"
  }
  # RELP
  relp {
    port  => "${RELP_PORT:10514}"
    type  => "relp"
    ssl   => false
    ssl_certificate => "/etc/tls/cert.pem"
    ssl_key => "/etc/tls/cert.key"
    ssl_cacert  => "/etc/tls/ca.pem"
    ssl_verify_mode => "force_peer"
  }
  # Graylog2
  gelf {
    port  => "${GELF_PORT:12201}"
    type  => "gelf"
    ssl   => false
    ssl_certificate => "/etc/tls/cert.pem"
    ssl_key => "/etc/tls/cert.key"
    ssl_cacert  => "/etc/tls/ca.pem"
    ssl_verify_mode => "force_peer"
  }
  # JSON (one event per line, \n delimited stream)
  tcp {
    port  => "${JSON_PORT:13000}"
    type  => "json"
    codec => "json_lines"
  }
  # JSON messages
  tcp {
    port  => "${JSON_PORT:14000}"
    type  => "json"
    codec => "json"
  }
  # Fluent
  tcp {
    port  => "${FLUENT_PORT:24224}"
    type  => "fluent"
    codec => "fluent"
  }
  udp {
    port  => "${FLUENT_PORT:24224}"
    type  => "fluent"
    codec => "fluent"
  }
  # Beats
  beats {
    port  => "${BEATS_PORT:25109}"
    type  => "beats"
    ssl   => false
    ssl_certificate => "/etc/tls/cert.pem"
    ssl_key => "/etc/tls/cert.key"
    ssl_cacert  => "/etc/tls/ca.pem"
    ssl_verify_mode => "force_peer"
  }
  # NMAP
  tcp {
    port  => "${NMAP_PORT:6666}"
    type  => "nmap"
    codec => "nmap"
  }
}

filter {
  if [type] == "RFC5424" {
    grok {
      match => { "message" => "%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:syslog5424_ts}|-) +(?:%{HOSTNAME:syslog5424_host}|-) +(?:%{NOTSPACE:syslog5424_app}|-) +(?:%{NOTSPACE:syslog5424_proc}|-) +(?:%{WORD:syslog5424_msgid}|-) +(?:%{SYSLOG5424SD:syslog5424_sd}|-|) +%{GREEDYDATA:syslog5424_msg}" }
    }
  }
}

output {
  if [type] == "RFC5424" and "_grokparsefailure" in [tags] {
    file { path => "/var/log/failed_RFC5424_events-%{+YYYY-MM-dd}" }
  } 
  else {
    elasticsearch { 
      hosts => [], 
      sniffing => true
    }
    # DEBUG
    stdout { codec => rubydebug }
  }
}